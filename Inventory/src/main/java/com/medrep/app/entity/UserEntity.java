package com.medrep.app.entity;
// Generated Aug 2, 2015 5:40:52 PM by Hibernate Tools 3.4.0.CR1

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;

import java.util.Collection;

import javax.persistence.CascadeType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

/**
 * TUser generated by hbm2java
 */
@Entity
@Table(name = "T_USER", uniqueConstraints = { @UniqueConstraint(columnNames = "ROLE_ID"),
		@UniqueConstraint(columnNames = "SECURITY_ID"), @UniqueConstraint(columnNames = "DP_ID") })
public class UserEntity implements java.io.Serializable {

	private Integer userId;
	private UserSecurityEntity security;
	private RoleEntity role;
	private String firstName;
	private String middleName;
	private String lastName;
	private String alias;
	private String title;
	private String phoneNo;
	private String mobileNo;
	private String emailId;
	private String alternateEmailId;
	private String status;
	private DisplayPictureEntity displayPicture;
	private Collection<LocationEntity> locations;
	private String regToken;
	
	
	

	@Column(name = "STATUS")
	public String getStatus() {
		return status;
	}
	public void setStatus(String status) {
		this.status = status;
	}

	public void setLocations(Collection<LocationEntity> locations) {
		this.locations = locations;
	}



	public UserEntity() {
	}

	

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "USER_ID", nullable = false)
	public Integer getUserId() {
		return this.userId;
	}

	public void setUserId(Integer userId) {
		this.userId = userId;
	}

	@OneToOne(cascade=CascadeType.ALL,fetch=FetchType.EAGER)
    @JoinColumn(name="SECURITY_ID",nullable=false,unique=true)
	public UserSecurityEntity getSecurity() {
		return this.security;
	}

	public void setSecurity(UserSecurityEntity security) {
		this.security = security;
	}

	@OneToOne(cascade=CascadeType.ALL,fetch=FetchType.EAGER)
    @JoinColumn(name="ROLE_ID",nullable=false,unique=true)
	public RoleEntity getRole() {
		return this.role;
	}

	public void setRole(RoleEntity role) {
		this.role = role;
	}

	@Column(name = "FIRST_NAME")
	public String getFirstName() {
		return this.firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	@Column(name = "MIDDLE_NAME")
	public String getMiddleName() {
		return this.middleName;
	}

	public void setMiddleName(String middleName) {
		this.middleName = middleName;
	}

	@Column(name = "LAST_NAME")
	public String getLastName() {
		return this.lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	@Column(name = "ALIAS")
	public String getAlias() {
		return this.alias;
	}

	public void setAlias(String alias) {
		this.alias = alias;
	}

	@Column(name = "TITLE")
	public String getTitle() {
		return this.title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	@Column(name = "PHONE_NO")
	public String getPhoneNo() {
		return this.phoneNo;
	}

	public void setPhoneNo(String phoneNo) {
		this.phoneNo = phoneNo;
	}

	@Column(name = "MOBILE_NO")
	public String getMobileNo() {
		return this.mobileNo;
	}

	public void setMobileNo(String mobileNo) {
		this.mobileNo = mobileNo;
	}

	@Column(name = "EMAIL_ID")
	public String getEmailId() {
		return this.emailId;
	}

	public void setEmailId(String emailId) {
		this.emailId = emailId;
	}

	@Column(name = "ALTERNATE_EMAIL_ID")
	public String getAlternateEmailId() {
		return this.alternateEmailId;
	}

	public void setAlternateEmailId(String alternateEmailId) {
		this.alternateEmailId = alternateEmailId;
	}

	@OneToOne(cascade=CascadeType.ALL,fetch=FetchType.LAZY)
    @JoinColumn(name="DP_ID",nullable=false,unique=true)
	public DisplayPictureEntity getDisplayPicture() {
		return this.displayPicture;
	}

	public void setDisplayPicture(DisplayPictureEntity dp) {
		this.displayPicture = dp;
	}
	
	@OneToMany(mappedBy="user", cascade=CascadeType.ALL, fetch=FetchType.LAZY)
	public Collection<LocationEntity> getLocations() {
		return locations;
	}
	
	@Column(name = "REG_TOKEN")
	public String getRegToken() {
		return regToken;
	}
	public void setRegToken(String regToken) {
		this.regToken = regToken;
	}

	
}
